name: Check

on:
  workflow_dispatch:
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: ⚙️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.0.x

      - name: 🔨 Build all projects
        continue-on-error: true
        run: |
          build_failed=false
          mapfile -t projects < <(find ./Занятие\ 5 ./Занятие\ 6 -name '*.csproj')

          for project in "${projects[@]}"; do
            echo "📦 Restoring dependencies for project: \"$project\""
            dotnet restore "$project"

            echo "🚀 Building project: \"$project\""
            build_output=$(dotnet build "$project" --no-restore || true)

            if [[ $build_output == *"error"* ]]; then
              build_failed=true
            fi

            echo "$build_output" | awk '!seen[$0]++' | while read -r line; do
              if [[ "$line" =~ ^(.*[a-zA-Z0-9_/.]+)\(([0-9]+),([0-9]+)\):\ error\ (.*)$ ]]; then
                file="${BASH_REMATCH[1]}"
                line_number="${BASH_REMATCH[2]}"
                column_number="${BASH_REMATCH[3]}"
                error_message="${BASH_REMATCH[4]}"
                echo "::error file=$file,line=$line_number,col=$column_number::$error_message"
              fi
            done
          done

          echo "build_failed=$build_failed" >> $GITHUB_ENV
          if [[ "$build_failed" == "true" ]]; then
            echo "❌ Build failed!"
          else
            echo "✅ Build successful!"
          fi

      - name: 🧪 Run all tests
        run: |
          test_failed=false
          mapfile -t test_projects < <(find ./Занятие\ 5 ./Занятие\ 6 -name '*.csproj')

          for test_project in "${test_projects[@]}"; do
            echo "🔬 Running tests for: \"$test_project\""
            test_output=$(dotnet test "$test_project" --no-restore --no-build --logger "console;verbosity=normal" 2>&1 || true)

            #if echo "$test_output" | grep -q "Failed!"; then
              #test_failed=true
              #echo "❌ Some tests failed!"
              
            failed_tests_count=$(echo "$test_output" | grep -Eo "Failed:[[:space:]]+[0-9]+" | awk '{print $2}')
            if [[ "$failed_tests_count" -gt 0 ]]; then
              test_failed=true
              echo "❌ $failed_tests_count tests failed!"

              while IFS= read -r line; do
                if [[ "$line" =~ ^\s*Failed\s+(.*)\s+\[ ]]; then
                  test_name="${BASH_REMATCH[1]}"
                  echo "::error title=Test Failed::$test_name"
                fi
              done <<< "$test_output"
            fi

            echo "$test_output"
          done

          echo "test_failed=$test_failed" >> "$GITHUB_ENV"

      - name: ✅ Final Check
        run: |
          echo "🔎 Checking build and test results..."
          echo "Build failed: $build_failed"
          echo "Tests failed: $test_failed"

          if [[ "$build_failed" == "true" ]]; then
            echo "❌ Build failed. Exiting with error."
            exit 1
          fi

          if [[ "$test_failed" == "true" ]]; then
            echo "❌ Some tests have failed. Exiting with error."
            exit 1
          fi

          echo "✅ Build and tests completed successfully!"
